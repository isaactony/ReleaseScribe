package com.releasescribe.renderer;

import com.releasescribe.model.ReleaseNotes;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.StandardOpenOption;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.List;

public class HtmlRenderer implements Renderer {
    
    private static final DateTimeFormatter TIMESTAMP_FORMATTER = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
    
    @Override
    public void render(ReleaseNotes releaseNotes, Path outputDir) throws IOException {
        // Ensure output directory exists
        Files.createDirectories(outputDir);
        
        // Render individual files
        renderChangelog(releaseNotes.getChangelogMd(), outputDir.resolve("CHANGELOG.html"));
        renderReleaseNotes(releaseNotes.getReleaseNotesMd(), outputDir.resolve("RELEASE_NOTES.html"));
        renderCustomerHighlights(releaseNotes.getCustomerHighlightsMd(), outputDir.resolve("HIGHLIGHTS.html"));
        renderGitHubReleaseBody(releaseNotes, outputDir.resolve("RELEASE_BODY.html"));
    }
    
    @Override
    public void renderChangelog(String changelogMd, Path outputFile) throws IOException {
        String content = buildHtmlContent("Changelog", changelogMd);
        Files.writeString(outputFile, content, StandardOpenOption.CREATE, StandardOpenOption.TRUNCATE_EXISTING);
    }
    
    @Override
    public void renderReleaseNotes(String releaseNotesMd, Path outputFile) throws IOException {
        String content = buildHtmlContent("Release Notes", releaseNotesMd);
        Files.writeString(outputFile, content, StandardOpenOption.CREATE, StandardOpenOption.TRUNCATE_EXISTING);
    }
    
    @Override
    public void renderCustomerHighlights(String customerHighlightsMd, Path outputFile) throws IOException {
        String content = buildHtmlContent("Customer Highlights", customerHighlightsMd);
        Files.writeString(outputFile, content, StandardOpenOption.CREATE, StandardOpenOption.TRUNCATE_EXISTING);
    }
    
    @Override
    public void renderGitHubReleaseBody(ReleaseNotes releaseNotes, Path outputFile) throws IOException {
        String content = buildGitHubReleaseBodyHtml(releaseNotes);
        Files.writeString(outputFile, content, StandardOpenOption.CREATE, StandardOpenOption.TRUNCATE_EXISTING);
    }
    
    private String buildHtmlContent(String title, String markdownContent) {
        StringBuilder content = new StringBuilder();
        content.append("<!DOCTYPE html>\n");
        content.append("<html lang=\"en\">\n");
        content.append("<head>\n");
        content.append("    <meta charset=\"UTF-8\">\n");
        content.append("    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n");
        content.append("    <title>").append(title).append("</title>\n");
        content.append("    <style>\n");
        content.append("        body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; line-height: 1.6; max-width: 800px; margin: 0 auto; padding: 20px; }\n");
        content.append("        h1, h2, h3 { color: #333; }\n");
        content.append("        h1 { border-bottom: 2px solid #eee; padding-bottom: 10px; }\n");
        content.append("        h2 { border-bottom: 1px solid #eee; padding-bottom: 5px; }\n");
        content.append("        code { background: #f5f5f5; padding: 2px 4px; border-radius: 3px; font-family: 'Monaco', 'Menlo', monospace; }\n");
        content.append("        pre { background: #f5f5f5; padding: 15px; border-radius: 5px; overflow-x: auto; }\n");
        content.append("        blockquote { border-left: 4px solid #ddd; margin: 0; padding-left: 20px; color: #666; }\n");
        content.append("        ul, ol { padding-left: 20px; }\n");
        content.append("        li { margin-bottom: 5px; }\n");
        content.append("        .timestamp { color: #666; font-size: 0.9em; margin-bottom: 20px; }\n");
        content.append("        .footer { margin-top: 40px; padding-top: 20px; border-top: 1px solid #eee; color: #666; font-size: 0.9em; }\n");
        content.append("    </style>\n");
        content.append("</head>\n");
        content.append("<body>\n");
        content.append("    <h1>").append(title).append("</h1>\n");
        content.append("    <div class=\"timestamp\">Generated on: ").append(LocalDateTime.now().format(TIMESTAMP_FORMATTER)).append("</div>\n");
        content.append("    <div class=\"content\">\n");
        content.append(convertMarkdownToHtml(markdownContent));
        content.append("    </div>\n");
        content.append("    <div class=\"footer\">\n");
        content.append("        Generated by ReleaseScribe\n");
        content.append("    </div>\n");
        content.append("</body>\n");
        content.append("</html>\n");
        return content.toString();
    }
    
    private String buildGitHubReleaseBodyHtml(ReleaseNotes releaseNotes) {
        StringBuilder content = new StringBuilder();
        content.append("<!DOCTYPE html>\n");
        content.append("<html lang=\"en\">\n");
        content.append("<head>\n");
        content.append("    <meta charset=\"UTF-8\">\n");
        content.append("    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n");
        content.append("    <title>GitHub Release Body</title>\n");
        content.append("    <style>\n");
        content.append("        body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; line-height: 1.6; max-width: 800px; margin: 0 auto; padding: 20px; }\n");
        content.append("        h1, h2, h3 { color: #333; }\n");
        content.append("        h2 { border-bottom: 1px solid #eee; padding-bottom: 5px; }\n");
        content.append("        code { background: #f5f5f5; padding: 2px 4px; border-radius: 3px; font-family: 'Monaco', 'Menlo', monospace; }\n");
        content.append("        pre { background: #f5f5f5; padding: 15px; border-radius: 5px; overflow-x: auto; }\n");
        content.append("        ul, ol { padding-left: 20px; }\n");
        content.append("        li { margin-bottom: 5px; }\n");
        content.append("    </style>\n");
        content.append("</head>\n");
        content.append("<body>\n");
        
        // Add customer highlights first
        if (releaseNotes.getCustomerHighlightsMd() != null && !releaseNotes.getCustomerHighlightsMd().trim().isEmpty()) {
            content.append("    <h2>What's New</h2>\n");
            content.append("    <div class=\"content\">\n");
            content.append(convertMarkdownToHtml(releaseNotes.getCustomerHighlightsMd()));
            content.append("    </div>\n");
        }
        
        // Add breaking changes if any
        if (releaseNotes.getBreakingChanges() != null && !releaseNotes.getBreakingChanges().isEmpty()) {
            content.append("    <h2>Breaking Changes</h2>\n");
            content.append("    <ul>\n");
            for (String breakingChange : releaseNotes.getBreakingChanges()) {
                content.append("        <li>").append(escapeHtml(breakingChange)).append("</li>\n");
            }
            content.append("    </ul>\n");
        }
        
        // Add upgrade steps if any
        if (releaseNotes.getUpgradeSteps() != null && !releaseNotes.getUpgradeSteps().isEmpty()) {
            content.append("    <h2>Upgrade Steps</h2>\n");
            content.append("    <ul>\n");
            for (String upgradeStep : releaseNotes.getUpgradeSteps()) {
                content.append("        <li>").append(escapeHtml(upgradeStep)).append("</li>\n");
            }
            content.append("    </ul>\n");
        }
        
        // Add full changelog
        if (releaseNotes.getChangelogMd() != null && !releaseNotes.getChangelogMd().trim().isEmpty()) {
            content.append("    <h2>Full Changelog</h2>\n");
            content.append("    <div class=\"content\">\n");
            content.append(convertMarkdownToHtml(releaseNotes.getChangelogMd()));
            content.append("    </div>\n");
        }
        
        content.append("</body>\n");
        content.append("</html>\n");
        return content.toString();
    }
    
    private String convertMarkdownToHtml(String markdown) {
        if (markdown == null) return "";
        
        // Simple markdown to HTML conversion
        String html = markdown
                .replaceAll("^# (.*)$", "<h1>$1</h1>")
                .replaceAll("^## (.*)$", "<h2>$1</h2>")
                .replaceAll("^### (.*)$", "<h3>$1</h3>")
                .replaceAll("^\\* (.*)$", "<li>$1</li>")
                .replaceAll("^\\- (.*)$", "<li>$1</li>")
                .replaceAll("\\*\\*(.*?)\\*\\*", "<strong>$1</strong>")
                .replaceAll("\\*(.*?)\\*", "<em>$1</em>")
                .replaceAll("`(.*?)`", "<code>$1</code>")
                .replaceAll("\\[([^\\]]+)\\]\\(([^)]+)\\)", "<a href=\"$2\">$1</a>");
        
        // Wrap consecutive list items in ul tags
        html = html.replaceAll("(<li>.*</li>\\s*)+", "<ul>$0</ul>");
        
        // Convert line breaks to <br>
        html = html.replaceAll("\\n", "<br>\n");
        
        return html;
    }
    
    private String escapeHtml(String text) {
        if (text == null) return "";
        return text.replace("&", "&amp;")
                  .replace("<", "&lt;")
                  .replace(">", "&gt;")
                  .replace("\"", "&quot;")
                  .replace("'", "&#39;");
    }
}
